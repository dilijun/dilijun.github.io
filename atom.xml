<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.D&#39;s Blog</title>
  
  <subtitle>红尘嚣 浮华一世转瞬空</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dilijun.fun/"/>
  <updated>2018-12-06T09:39:37.427Z</updated>
  <id>http://www.dilijun.fun/</id>
  
  <author>
    <name>Mr.D</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot集成swagger2</title>
    <link href="http://www.dilijun.fun/2018/12/06/springboot%E9%9B%86%E6%88%90swagger2/"/>
    <id>http://www.dilijun.fun/2018/12/06/springboot集成swagger2/</id>
    <published>2018-12-06T08:52:00.000Z</published>
    <updated>2018-12-06T09:39:37.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>随着互联网时代的快速发展，越来越多的项目使用了前后端分离开发模式，这种方式下API接口文档就变得至关重要了，而swagger就是帮助我们更快更好编写API接口的一种框架。那么如何把它与SpringBoot集成起来使用呢？<br><a id="more"></a></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在 pom.xml 文件中添加swagger2的依赖<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="创建Java配置"><a href="#创建Java配置" class="headerlink" title="创建Java配置"></a>创建Java配置</h3><ul><li><p>添加配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.xxx"</span>))</span><br><span class="line">                .paths(PathSelectors.regex(<span class="string">"/api/.*"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Restful APIs"</span>)</span><br><span class="line">                .description(<span class="string">""</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"xxx"</span>, <span class="string">"xxx"</span>, <span class="string">"xxx"</span>))</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加静态文件映射配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="编写API接口"><a href="#编写API接口" class="headerlink" title="编写API接口"></a>编写API接口</h3><p>添加@ApiOperation注解来给API增加说明，添加@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"测试"</span>, notes = <span class="string">"接口测试"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"测试ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Integer"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RestResult <span class="title">test</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RestResult.builder().result(<span class="keyword">true</span>).data(id).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="API文档访问"><a href="#API文档访问" class="headerlink" title="API文档访问"></a>API文档访问</h3><p>点击浏览器链接  <a href="http://localhost:8090/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8090/swagger-ui.html</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着互联网时代的快速发展，越来越多的项目使用了前后端分离开发模式，这种方式下API接口文档就变得至关重要了，而swagger就是帮助我们更快更好编写API接口的一种框架。那么如何把它与SpringBoot集成起来使用呢？&lt;br&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://www.dilijun.fun/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.dilijun.fun/tags/springboot/"/>
    
      <category term="swagger2" scheme="http://www.dilijun.fun/tags/swagger2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客（部署篇）</title>
    <link href="http://www.dilijun.fun/2018/10/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89/"/>
    <id>http://www.dilijun.fun/2018/10/21/Hexo搭建博客（部署篇）/</id>
    <published>2018-10-21T04:46:29.000Z</published>
    <updated>2018-12-06T09:39:37.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>目前为止我们的博客是搭建起来了，但在实际使用中我们会发现有诸多不便。比如说，我们要发表一篇博文，必须手动hexo g 命令生成静态网页，然后 hexo d 命令将静态文件推送到GitHub远程仓库。第一是比计较麻烦；第二，如果我们换了一个新的环境就没法发博客了。So，我们就要祭出我们的法宝-<code>Travis CI</code>了。<br><a id="more"></a></p><h3 id="什么是-Travis-CI"><a href="#什么是-Travis-CI" class="headerlink" title="什么是 Travis CI"></a>什么是 <code>Travis CI</code></h3><blockquote><p>Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。</p></blockquote><h3 id="部署思路"><a href="#部署思路" class="headerlink" title="部署思路"></a>部署思路</h3><ul><li>在github博客项目下创建一个新的分支<code>hexo</code>，将hexo博客源码push到该分支，<code>master</code>分支给git pages部署静态博客文件使用。</li><li>使用<code>Travis CI</code>自动部署<code>hexo</code>分支，每次我们写完博客后提交到<code>hexo</code>分支，<code>Travis CI</code>检测到后会自动部署将静态文件推送到<code>master</code>分支和<code>coding</code>上的我们配置的项目中。</li></ul><h3 id="使用-Travis-CI部署博客"><a href="#使用-Travis-CI部署博客" class="headerlink" title="使用 Travis CI部署博客"></a>使用 <code>Travis CI</code>部署博客</h3><ul><li>要使用 Travis CI，必须要有一个<code>Github</code>账号，因为Travis CI只支持在Github上构建项目。</li><li>登陆Travis CI（使用Github账号登陆）,把github账号的项目加载进来，如果没有自动加载进来，可以手动点击右上角的 <code>Sync account</code> 按钮，待到同步完成后将要自动构建的项目开启。<br><img src="http://pgnau40bx.bkt.clouddn.com/travis%20ci%E8%AE%BE%E7%BD%AE.png" alt=""></li><li>travis ci设置：<br><img src="http://pgnau40bx.bkt.clouddn.com/travis%20ci%E8%AE%BE%E7%BD%AE2.png" alt=""><br>开启<code>General</code>下的两项选线 。</li><li>配合Access Token：获取github生成的Access Token和coding上生成的Access Token；配置到<code>Travis CI</code>下的<code>Environment Variables</code>下。</li><li><p>编写配置文件 <code>.travis.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- 8.9.0</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">before_install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo generate</span><br><span class="line">after_script:</span><br><span class="line">- cd ./public</span><br><span class="line">- git init</span><br><span class="line">- git config user.name &quot;dilijun&quot;    # 配置自己的用户名</span><br><span class="line">- git config user.email &quot;dlj4job@sina.com&quot;  # 配置自己的邮箱</span><br><span class="line">- git add .</span><br><span class="line">- git commit -m &quot;TravisCI 自动部署&quot;</span><br><span class="line"># Github Pages  CI_TOKEN 为上一步在 Travis CI的 Environment Variables 下配置的变量名称</span><br><span class="line">- git push --force --quiet &quot;https://$&#123;CI_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master</span><br><span class="line"># Coding Pages &lt;username&gt;写自己coding上的用户名，CO_TOKEN同上</span><br><span class="line">- git push --force --quiet &quot;https://&lt;username&gt;:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;&quot; master:master</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - hexo</span><br><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">  # Github Pages and Coding Pages 配置自己的github和coding地址</span><br><span class="line">  - GH_REF: github.com/dilijun/dilijun.github.io.git</span><br><span class="line">  - GH_REF: git.coding.net/dilijun/dilijun.coding.me.git</span><br></pre></td></tr></table></figure></li><li><p>将修改推送到 <code>hexo</code> 分支，然后等Travis CI 构建并自动部署成功。<br><img src="http://pgnau40bx.bkt.clouddn.com/Travis%20CI%20%E6%9E%84%E5%BB%BA.png" alt=""></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前为止我们的博客是搭建起来了，但在实际使用中我们会发现有诸多不便。比如说，我们要发表一篇博文，必须手动hexo g 命令生成静态网页，然后 hexo d 命令将静态文件推送到GitHub远程仓库。第一是比计较麻烦；第二，如果我们换了一个新的环境就没法发博客了。So，我们就要祭出我们的法宝-&lt;code&gt;Travis CI&lt;/code&gt;了。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.dilijun.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.dilijun.fun/tags/hexo/"/>
    
      <category term="github" scheme="http://www.dilijun.fun/tags/github/"/>
    
      <category term="coding" scheme="http://www.dilijun.fun/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客（用法篇）</title>
    <link href="http://www.dilijun.fun/2018/10/20/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%94%A8%E6%B3%95%E7%AF%87%EF%BC%89/"/>
    <id>http://www.dilijun.fun/2018/10/20/Hexo搭建博客（用法篇）/</id>
    <published>2018-10-20T04:46:29.000Z</published>
    <updated>2018-12-06T09:39:37.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本片主要介绍如何使用Hexo博客。<br><a id="more"></a></p><p>Hexo博客支持Markdown语法，所以我们要使用Hexo博客，基本的Markdown还是要会的，不会的朋友可以去 <a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">Markdown基本语法</a> 这里学习一下。</p><h3 id="新建博客文章"><a href="#新建博客文章" class="headerlink" title="新建博客文章"></a>新建博客文章</h3><p>在博客根目录下使用命令 <code>hexo new &#39;文章名称&#39;</code> 创建文章，会在source/_posts/目录下生成名称为<em>文章名称.md</em>的博客。我们也可以直接进入该目录下手动创建markdown文件。</p><h3 id="为文章添加meta信息"><a href="#为文章添加meta信息" class="headerlink" title="为文章添加meta信息"></a>为文章添加meta信息</h3><p>我们新创建的文章，头部只有 <em>title</em>、<em>date</em> 和 <em>tags</em> 属性，我们可以增加 <em>category</em>、<em>tags</em> 和 <em>comments</em> 等属性。</p><ul><li>category：文章分类，hexo会自动生成该分类信息</li><li>tags：文章标签，可以添加多个标签，hexo会自动生成标签信息<br><code>tags: [tag1, tag2...]</code></li><li>comments：添加评论插件后，设置是否可以评论。</li></ul><h3 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h3><p>文章中想要插入图片，有多中方式选择：</p><ol><li>在source目录下创建images目录，用于存放图片，在文章中可以直接使用<code>/images/avatar.gif</code>的方式引入。</li><li>使用图床，推荐使用<em>七牛云</em>，可以免费上传图片，然后复制图片地址插入文章中即可。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本片主要介绍如何使用Hexo博客。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.dilijun.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.dilijun.fun/tags/hexo/"/>
    
      <category term="markdown" scheme="http://www.dilijun.fun/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客（优化篇）</title>
    <link href="http://www.dilijun.fun/2018/10/19/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BC%98%E5%8C%96%E7%AF%87%EF%BC%89/"/>
    <id>http://www.dilijun.fun/2018/10/19/Hexo搭建博客（优化篇）/</id>
    <published>2018-10-19T04:46:29.000Z</published>
    <updated>2018-12-06T09:39:37.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上一篇博客介绍了如何搭建一个Hexo博客，但是你以为Hexo就只有这样吗？No！<br><a id="more"></a></p><h3 id="Hexo基础配置"><a href="#Hexo基础配置" class="headerlink" title="Hexo基础配置"></a>Hexo基础配置</h3><h4 id="1-打开根目录下-config-yml配置文件，修改以下配置："><a href="#1-打开根目录下-config-yml配置文件，修改以下配置：" class="headerlink" title="1.打开根目录下_config.yml配置文件，修改以下配置："></a>1.打开根目录下_config.yml配置文件，修改以下配置：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Mr.D&apos;s Blog      #博客标题</span><br><span class="line">subtitle: 红尘嚣 浮华一世转瞬空  #博客子标题</span><br><span class="line">description:   #描述</span><br><span class="line">keywords:     #关键字</span><br><span class="line">author: Mr.D  #博客作者</span><br><span class="line">language: zh-CN     #语言</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题</a>这里是Hexo的官方主题，本博客使用的是<code>NexT</code>主题，其他主题可以去上面的地址查看选&gt;用。</p><h4 id="1-在博客根目录下执行以下命令安装主题：git-clone-https-github-com-theme-next-hexo-theme-next-themes-next。"><a href="#1-在博客根目录下执行以下命令安装主题：git-clone-https-github-com-theme-next-hexo-theme-next-themes-next。" class="headerlink" title="1. 在博客根目录下执行以下命令安装主题：git clone https://github.com/theme-next/hexo-theme-next themes/next。"></a>1. 在博客根目录下执行以下命令安装主题：<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>。</h4><h4 id="2-修改根目录下的-config-yml-配置文件theme，设置主题为next。"><a href="#2-修改根目录下的-config-yml-配置文件theme，设置主题为next。" class="headerlink" title="2. 修改根目录下的 _config.yml 配置文件theme，设置主题为next。"></a>2. 修改根目录下的 _config.yml 配置文件theme，设置主题为<code>next</code>。</h4><p><img src="http://pgnau40bx.bkt.clouddn.com/Hexo%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98.png" alt=""></p><h4 id="3-在scheme-settings下选择自己喜欢的一款主题风格"><a href="#3-在scheme-settings下选择自己喜欢的一款主题风格" class="headerlink" title="3.在scheme settings下选择自己喜欢的一款主题风格"></a>3.在scheme settings下选择自己喜欢的一款主题风格</h4><p><img src="http://pgnau40bx.bkt.clouddn.com/hexo%E4%B8%BB%E9%A2%98%E9%A3%8E%E6%A0%BC%E8%AE%BE%E7%BD%AE.png" alt=""></p><h4 id="4-配置导航菜单"><a href="#4-配置导航菜单" class="headerlink" title="4.配置导航菜单"></a>4.配置导航菜单</h4><p>Hexo默认配置只有<code>首页</code>和<code>归档</code><br><img src="http://pgnau40bx.bkt.clouddn.com/Hexo%E9%BB%98%E8%AE%A4%E8%8F%9C%E5%8D%95.png" alt=""><br>我们可以编辑<code>theme/next</code>下的<code>_config.yml</code>配置来添加其他导航菜单，将需要添加的菜单注释放开即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p><p><img src="http://pgnau40bx.bkt.clouddn.com/Hexo%E6%B7%BB%E5%8A%A0%E5%90%8E%E7%9A%84%E8%8F%9C%E5%8D%95%E5%AF%BC%E8%88%AA.png" alt=""><br>这个时候我们新添加的菜单是不可用的，我们必须在<code>source</code>目录下创建对应的<code>page</code>文件夹，比如要创建<code>标签</code>文件夹，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page `tags`</span><br></pre></td></tr></table></figure></p><p>会在<code>source</code>下生成<code>tags</code>文件夹，文件加下会生成<code>index.md</code>文件，编辑<code>index.md</code>文件，删除<code>title</code>行，添加<code>type: &#39;tags&#39;</code>，<code>comments: false</code>的作用是添加评论插件后阻塞用户在该标签页下发表评论：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">type: &apos;tags&apos;</span><br><span class="line">date: 2018-10-18 22:24:29</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><h4 id="5-添加RSS"><a href="#5-添加RSS" class="headerlink" title="5.添加RSS"></a>5.添加RSS</h4><ul><li>安装插件：在根目录下执行命令  <code>npm install hexo-generator-feed --save</code></li><li><p>在根配置文件<code>_config.yml</code>文件中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件<code>theme/next/_config.yml</code>文件中，找到<code>rss</code>，添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-添加-Fork-me-on-Github"><a href="#6-添加-Fork-me-on-Github" class="headerlink" title="6.添加 Fork me on Github"></a>6.添加 Fork me on Github</h4><p>在主题配置文件<code>theme/next/_config.yml</code>文件中，搜索<code>Follow me on GitHub</code>，找到如何配置，打开最后一行的注释，并把 <code>yourname</code> 改为你自己的github用户名即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Follow me on GitHub banner in right-top corner.</span><br><span class="line"># Usage: `permalink || title`</span><br><span class="line"># Value before `||` delimeter is the target permalink.</span><br><span class="line"># Value after `||` delimeter is the title and aria-label name.</span><br><span class="line">github_banner: https://github.com/yourname || Follow me on GitHub</span><br></pre></td></tr></table></figure></p><h4 id="7-博客背景添加粒子效果"><a href="#7-博客背景添加粒子效果" class="headerlink" title="7.博客背景添加粒子效果"></a>7.博客背景添加粒子效果</h4><ul><li>进入<code>theme/next/</code>目录下，执行 以下命令：<br><code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></li><li>执行成功后，将主题配置文件<code>_config.yml</code>中的 <code>canvas_nest</code> 值设置为 <code>ture</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-修改文章内链样式"><a href="#8-修改文章内链样式" class="headerlink" title="8.修改文章内链样式"></a>8.修改文章内链样式</h4><ul><li>nexT提供了允许用户自定义样式的功能，我们可以进入<code>theme/next/source/css/_custom/custom.styl</code>文件中，添加想要的样式即可：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//自定义文章内链样式</span><br><span class="line">.post-body</span><br><span class="line">    p</span><br><span class="line">        a</span><br><span class="line">            color: #f0ad4e;</span><br><span class="line">            border-bottom: 1px solid #f0ad4e;</span><br><span class="line">            &amp;:hover </span><br><span class="line">                color: #0593d3;</span><br><span class="line">                border-bottom: 1px solid #0593d3;</span><br></pre></td></tr></table></figure></li></ul><h4 id="9-给文章底部的标签添加图标"><a href="#9-给文章底部的标签添加图标" class="headerlink" title="9.给文章底部的标签添加图标"></a>9.给文章底部的标签添加图标</h4><ul><li>打开文件<code>themes/next/layout/_macro/post.swig</code>，把<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">      &#123;% for tag in post.tags %&#125;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><p>中的 <code>#</code> 替换为 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code> 即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">      &#123;% for tag in post.tags %&#125;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;</span><br><span class="line">              &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; </span><br><span class="line">              &#123;&#123; tag.name &#125;&#125;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://pgnau40bx.bkt.clouddn.com/%E6%96%87%E7%AB%A0%E5%BA%95%E9%83%A8%E6%A0%87%E7%AD%BE%E6%B7%BB%E5%8A%A0%E5%9B%BE%E6%A0%87.png" alt=""></p><h4 id="10-设置头像动画效果"><a href="#10-设置头像动画效果" class="headerlink" title="10.设置头像动画效果"></a>10.设置头像动画效果</h4><ul><li>把头像图片添加到 <code>theme/next/source/images</code> 下，命名为 <code>avatar.jpg</code></li><li>打开主题配置文件 <code>theme/next/_config.yml</code>，修改以下配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # in theme directory(source/images): /images/avatar.gif</span><br><span class="line">  # in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/avatar.jpg    #头像地址</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: true     #开启圆形头像</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: true    #鼠标一上去时头像自动旋转</span><br></pre></td></tr></table></figure></li></ul><h4 id="11-给文章添加阴影效果"><a href="#11-给文章添加阴影效果" class="headerlink" title="11.给文章添加阴影效果"></a>11.给文章添加阴影效果</h4><ul><li>打开文件<code>theme/next/source/css/_custom/custom.styl</code>，添加如下配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//主页文章添加阴影效果    </span><br><span class="line">.post </span><br><span class="line">     margin-top: 60px;</span><br><span class="line">     margin-bottom: 60px;</span><br><span class="line">     padding: 25px;</span><br><span class="line">     -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">     -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br></pre></td></tr></table></figure></li></ul><h4 id="12-开启文章访问量设置"><a href="#12-开启文章访问量设置" class="headerlink" title="12.开启文章访问量设置"></a>12.开启文章访问量设置</h4><ul><li>进入主题配置文件 <code>theme/next/_config.yml</code>，修改 <code>busuanzi_count</code> 的 <code>enable</code> 属性为 <code>true</code> ：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Show Views/Visitors of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure></li></ul><h4 id="13-开启文章中代码复制功能"><a href="#13-开启文章中代码复制功能" class="headerlink" title="13.开启文章中代码复制功能"></a>13.开启文章中代码复制功能</h4><ul><li>进入主题配置文件 <code>theme/next/_config.yml</code>，修改 <code>codeblock</code> 下的  <code>copy_button</code> 的 <code>enable</code> 属性为 <code>true</code> ：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  # Manual define the border radius in codeblock</span><br><span class="line">  # Leave it empty for the default 1</span><br><span class="line">  border_radius:</span><br><span class="line">  # Add copy button on codeblock</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    # Show text copy result</span><br><span class="line">    show_result: false</span><br></pre></td></tr></table></figure></li></ul><h4 id="14-开启网页顶部的进度加载条"><a href="#14-开启网页顶部的进度加载条" class="headerlink" title="14.开启网页顶部的进度加载条"></a>14.开启网页顶部的进度加载条</h4><ul><li><p>进入 <code>theme/next/</code> 目录下，执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-pace source/lib/pace</span><br></pre></td></tr></table></figure></li><li><p>进入主题配置文件 <code>theme/next/_config.yml</code>，修改 <code>pace</code> 属性的值为 <code>true</code> ，并选择一款自己喜欢的加载样式 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure></li></ul><h4 id="15-添加评论功能"><a href="#15-添加评论功能" class="headerlink" title="15.添加评论功能"></a>15.添加评论功能</h4><ul><li>本博客使用的是<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a>，没有账号的可先去注册一个。</li><li>安装并配置好后，拷贝 <code>data-uid</code>的值。<br><img src="http://pgnau40bx.bkt.clouddn.com/Hexo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.png" alt=""></li><li>在主题配置 <code>theme/next/_config.yml</code> 下找到 <code>livere_uid</code>，打开注释并配置上一步拷贝出来的 <code>data-uid</code>即可。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">livere_uid: your uid</span><br></pre></td></tr></table></figure></li></ul><h4 id="16-隐藏底部Hexo强力驱动、主题等信息"><a href="#16-隐藏底部Hexo强力驱动、主题等信息" class="headerlink" title="16.隐藏底部Hexo强力驱动、主题等信息"></a>16.隐藏底部Hexo强力驱动、主题等信息</h4><ul><li><p>在主题配置 <code>theme/next/_config.yml</code> 下找到 <code>powered</code>，把所有属性的值都改为 <code>false</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">powered:</span><br><span class="line">    # Hexo link (Powered by Hexo).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of Hexo after Hexo link (vX.X.X).</span><br><span class="line">    version: false</span><br></pre></td></tr></table></figure></li><li><p>在主题配置 <code>theme/next/_config.yml</code> 下找到 <code>theme</code>，把所有属性的值都改为 <code>false</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">theme:</span><br><span class="line">    # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">    enable: false</span><br><span class="line">    # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">    version: false</span><br></pre></td></tr></table></figure></li></ul><h4 id="17-添加站内搜索"><a href="#17-添加站内搜索" class="headerlink" title="17.添加站内搜索"></a>17.添加站内搜索</h4><ul><li><p>在根目录下执行以下命令安装 <code>hexo-generator-searchdb</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>上一步命令执行成功后，打开主题配置文件 <code>theme/next/_config.yml</code>，找到 <code>local search</code> 配置，设置属性 <code>enable</code> 为 <code>true</code> 即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # unescape html strings to the readable one</span><br><span class="line">  unescape: false</span><br></pre></td></tr></table></figure></li></ul><h4 id="18-开启社交图标"><a href="#18-开启社交图标" class="headerlink" title="18.开启社交图标"></a>18.开启社交图标</h4><ul><li>打开主题配置文件 <code>theme/next/_config.yml</code>，找到 <code>Social Links</code> 配置，配置响应的社交链接：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Social Links.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/dilijun || github</span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure></li></ul><h4 id="19-文章底部配置版权信息"><a href="#19-文章底部配置版权信息" class="headerlink" title="19.文章底部配置版权信息"></a>19.文章底部配置版权信息</h4><ul><li>打开主题配置文件 <code>theme/next/_config.yml</code>，找到 <code>Declare license on posts</code>，配置 <code>post_copyright</code> 下的 <code>enable</code> 属性为 <code>true</code>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="20-开启文章阅读进度条"><a href="#20-开启文章阅读进度条" class="headerlink" title="20.开启文章阅读进度条"></a>20.开启文章阅读进度条</h4><ul><li><p>在 <code>theme/next/</code> 目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress</span><br></pre></td></tr></table></figure></li><li><p>执行成功后，进入主题配置中，找到 <code>Reading progress bar</code>，设置 <code>enable</code> 属性为 <code>true</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Reading progress bar</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-reading-progress</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &quot;#37c6c0&quot;</span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure></li></ul><h4 id="21-开启fancybox图片插件"><a href="#21-开启fancybox图片插件" class="headerlink" title="21.开启fancybox图片插件"></a>21.开启<code>fancybox</code>图片插件</h4><ul><li><p>在 <code>theme/next/</code> 目录下执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure></li><li><p>命令执行成功后，打开主题配置，找到 <code>Fancybox</code>配置，设置为 <code>true</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Fancybox. There is support for old version 2 and new version 3.</span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇博客介绍了如何搭建一个Hexo博客，但是你以为Hexo就只有这样吗？No！&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.dilijun.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.dilijun.fun/tags/hexo/"/>
    
      <category term="github" scheme="http://www.dilijun.fun/tags/github/"/>
    
      <category term="coding" scheme="http://www.dilijun.fun/tags/coding/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建博客（基础篇）</title>
    <link href="http://www.dilijun.fun/2018/10/15/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <id>http://www.dilijun.fun/2018/10/15/Hexo搭建博客（基础篇）/</id>
    <published>2018-10-15T04:46:29.000Z</published>
    <updated>2018-12-06T09:39:37.427Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Hexo 是一个基于Node.js的快速、简洁且高效的博客框架。使用Markdown来编写文章，利用靓丽的主题可快速、轻松生成静态网页。<br><a id="more"></a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>在安装Hexo之前，我们必须保证已安装一下应用程序：</p><ul><li>Node.js</li><li>Git<h4 id="1-安装Node-js（如已安装，可忽略该步骤）"><a href="#1-安装Node-js（如已安装，可忽略该步骤）" class="headerlink" title="1. 安装Node.js（如已安装，可忽略该步骤）"></a>1. 安装Node.js（如已安装，可忽略该步骤）</h4>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a><br>安装成功后使用以下命令测试是否安装成功：<br><code>node -v</code><h4 id="2-安装Git（如已安装，可忽略该步骤）"><a href="#2-安装Git（如已安装，可忽略该步骤）" class="headerlink" title="2. 安装Git（如已安装，可忽略该步骤）"></a>2. 安装Git（如已安装，可忽略该步骤）</h4>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a><br>安装成功后使用以下命令测试是否安装成功：<br><code>git --version</code></li></ul><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><h4 id="1-安装hexo，命令："><a href="#1-安装hexo，命令：" class="headerlink" title="1. 安装hexo，命令："></a>1. 安装hexo，命令：</h4><p><code>npm install -g hexo-cli</code></p><h4 id="2-初始化博客，命令："><a href="#2-初始化博客，命令：" class="headerlink" title="2. 初始化博客，命令："></a>2. 初始化博客，命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;blog_name&gt; --&lt;blog_name&gt;为你自己博客项目的名称，或者可以 mkdir &lt;blog_name&gt;，进入该目录下执行 hexo init</span><br><span class="line">cd &lt;blog_name&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="3-博客初始化后，可以使用以下命令启动博客："><a href="#3-博客初始化后，可以使用以下命令启动博客：" class="headerlink" title="3. 博客初始化后，可以使用以下命令启动博客："></a>3. 博客初始化后，可以使用以下命令启动博客：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean --清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g(hexo generate) --生成静态页面 </span><br><span class="line">hexo s(hexo server) --开启本地服务</span><br></pre></td></tr></table></figure><h4 id="4-此时打开浏览器，访问-http-localhost-4000-即可看到自带默认主题的博客。"><a href="#4-此时打开浏览器，访问-http-localhost-4000-即可看到自带默认主题的博客。" class="headerlink" title="4. 此时打开浏览器，访问 http://localhost:4000 即可看到自带默认主题的博客。"></a>4. 此时打开浏览器，访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到自带默认主题的博客。</h4><p><img src="http://pgnau40bx.bkt.clouddn.com/%E5%88%9D%E5%A7%8B%E5%8D%9A%E5%AE%A2.jpeg" alt=""></p><h4 id="5-Hexo命令知多少"><a href="#5-Hexo命令知多少" class="headerlink" title="5. Hexo命令知多少"></a>5. Hexo命令知多少</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo help --可查看hexo命令</span><br><span class="line">hexo generate --生成博客静态页面，也可用缩写命令 hexo g</span><br><span class="line">hexo clean --清除生成的静态页面</span><br><span class="line">hexo server --开启本地服务，也可用缩写命令 hexo s、hexo server --debug 是开启debug模式</span><br><span class="line">hexo deploy --部署博客，也可用缩写命令 hexo d</span><br><span class="line">hexo new &apos;postName&apos; --新建文章，默认会在 source/_posts/ 下生成&lt;postName&gt;.md的Markdown文件</span><br><span class="line">hexo new page &apos;pageName&apos; --新建页面，默认会在 source目录下，生成&lt;pageName&gt;文件夹，并在该文件夹下生成 index.md 文件</span><br></pre></td></tr></table></figure><h3 id="博客上github"><a href="#博客上github" class="headerlink" title="博客上github"></a>博客上github</h3><h4 id="1-确保有github账号，没有的可自己去github申请。"><a href="#1-确保有github账号，没有的可自己去github申请。" class="headerlink" title="1. 确保有github账号，没有的可自己去github申请。"></a>1. 确保有github账号，没有的可自己去<a href="https://github.com" target="_blank" rel="noopener">github</a>申请。</h4><h4 id="2-创建代码库，命名规则为yourname-github-io，‘yourname’为你自己github的用户名。"><a href="#2-创建代码库，命名规则为yourname-github-io，‘yourname’为你自己github的用户名。" class="headerlink" title="2. 创建代码库，命名规则为yourname.github.io，‘yourname’为你自己github的用户名。"></a>2. 创建代码库，命名规则为<code>yourname.github.io</code>，‘yourname’为你自己github的用户名。</h4><p><img src="http://pgnau40bx.bkt.clouddn.com/github%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%A0%81%E5%BA%93.jpeg" alt="enter description here"></p><h4 id="3-生成ssh-keys"><a href="#3-生成ssh-keys" class="headerlink" title="3. 生成ssh keys"></a>3. 生成ssh keys</h4><p><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code>，一路回车即可，创建成功后，会在用户目录下的 .ssh 目录下生成 id_rsa和id_rsa.pub两个文件，我们把id_rsa.pub中的内容拷贝到github上即可，title可以随便填写。<br><img src="http://pgnau40bx.bkt.clouddn.com/github%E9%85%8D%E7%BD%AEssh_key.jpeg" alt="enter description here"><br>配置好后，可以使用<code>ssh -T git@github.com</code>命令来测试是否配置成功。</p><h4 id="4-修改Hexo配置"><a href="#4-修改Hexo配置" class="headerlink" title="4. 修改Hexo配置"></a>4. 修改Hexo配置</h4><ul><li>安装hexo-deployer-git插件，命令为：<br><code>npm install --save hexo-deployer-git</code></li><li>打开根目录下的_config.yml配置文件，修改配置最后部分为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:(username)/(repoName).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-测试并部署"><a href="#5-测试并部署" class="headerlink" title="5. 测试并部署"></a>5. 测试并部署</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean --清空静态页面</span><br><span class="line">hexo g --生成新的静态页面</span><br><span class="line">hexo d --将public目录下的内容不素到github上</span><br></pre></td></tr></table></figure><p>按以上目录操作完成后，可打开浏览器访问 <code>http://username.github.io</code>来访问博客(username.github.io为你的仓库名称)</p><h4 id="6-绑定域名"><a href="#6-绑定域名" class="headerlink" title="6. 绑定域名"></a>6. 绑定域名</h4><ul><li>如果想通过域名访问的就继续，前提是要有自己的域名，要是通过上面的仓库名可以访问就满足的可以跳过这一步</li><li>去自己的域名下添加解析记录类型为 CNAME 主机记录为 @ 线路选择默认，TTL 选择 600，记录值为 github 的仓库名 username.github.io</li><li>配置 hexo<br>创建 CNAME 配置文件 <code>touch ~/hexo/source/CNAME</code>，去 CNAME 文件 下添加刚才解析的域名 例如： <code>zhangsan.com</code>。然后重新部署一下 <code>hexo g -d</code>。此时即可用自己的域名来访问博客了。</li></ul><h3 id="博客上coding"><a href="#博客上coding" class="headerlink" title="博客上coding"></a>博客上coding</h3><h4 id="1-确保有coding账号，没有的可去coding申请。"><a href="#1-确保有coding账号，没有的可去coding申请。" class="headerlink" title="1. 确保有coding账号，没有的可去coding申请。"></a>1. 确保有coding账号，没有的可去<a href="https://coding.net" target="_blank" rel="noopener">coding</a>申请。</h4><h4 id="2-创建代码库，命名规则为username-coding-me，username为你自己的coding的用户名。"><a href="#2-创建代码库，命名规则为username-coding-me，username为你自己的coding的用户名。" class="headerlink" title="2. 创建代码库，命名规则为username.coding.me，username为你自己的coding的用户名。"></a>2. 创建代码库，命名规则为<code>username.coding.me</code>，username为你自己的coding的用户名。</h4><h4 id="3-拷贝上面已生成的ssh-keys的公钥到coding上"><a href="#3-拷贝上面已生成的ssh-keys的公钥到coding上" class="headerlink" title="3. 拷贝上面已生成的ssh keys的公钥到coding上"></a>3. 拷贝上面已生成的ssh keys的公钥到coding上</h4><p><img src="http://pgnau40bx.bkt.clouddn.com/coding%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5.png" alt=""></p><h4 id="4-修改hexo配置"><a href="#4-修改hexo配置" class="headerlink" title="4. 修改hexo配置"></a>4. 修改hexo配置</h4><p>在根目录配置文件_config.yml中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:(username)/(repoName).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>改为如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">github: git@github.com:(username)/(repoName).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号</span><br><span class="line">coding: git@git.coding.net:(username)/(repoName).coding.me.git #括号里面换成自己的用户名和仓库名,去掉括号</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h4 id="5-再次部署并访问http-username-coding-me-。"><a href="#5-再次部署并访问http-username-coding-me-。" class="headerlink" title="5. 再次部署并访问http://username.coding.me 。"></a>5. 再次部署并访问<code>http://username.coding.me</code> 。</h4><h4 id="6-绑定域名-1"><a href="#6-绑定域名-1" class="headerlink" title="6. 绑定域名"></a>6. 绑定域名</h4><ul><li>去自己的域名下添加解析记录类型为 CNAME 主机记录为 @ 线路选择默认，TTL 选择 600，记录值为 coding的仓库名 username.coding.me。</li><li>在coding代码库的左侧<code>代码</code>菜单下点击<code>Pages 服务</code>，点击<code>一键开启Coding Pages，进入Pages服务页面偶点击右侧的</code>设置图标`，在自定义域名下，绑定刚才解析的域名。</li><li>重新部署hexo。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个基于Node.js的快速、简洁且高效的博客框架。使用Markdown来编写文章，利用靓丽的主题可快速、轻松生成静态网页。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.dilijun.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.dilijun.fun/tags/hexo/"/>
    
      <category term="github" scheme="http://www.dilijun.fun/tags/github/"/>
    
  </entry>
  
</feed>
