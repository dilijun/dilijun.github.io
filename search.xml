<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringBoot集成swagger2]]></title>
    <url>%2F2018%2F12%2F06%2Fspringboot%E9%9B%86%E6%88%90swagger2%2F</url>
    <content type="text"><![CDATA[随着互联网时代的快速发展，越来越多的项目使用了前后端分离开发模式，这种方式下API接口文档就变得至关重要了，而swagger就是帮助我们更快更好编写API接口的一种框架。那么如何把它与SpringBoot集成起来使用呢？ 添加依赖在 pom.xml 文件中添加swagger2的依赖12345678910&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; 创建Java配置 添加配置类 123456789101112131415161718192021222324@Configuration@EnableSwagger2public class SwaggerConfig &#123; @Bean public Docket createRestApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.basePackage("com.xxx")) .paths(PathSelectors.regex("/api/.*")) .build(); &#125; private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title("Restful APIs") .description("") .contact(new Contact("xxx", "xxx", "xxx")) .version("1.0") .build(); &#125;&#125; 添加静态文件映射配置 12345678910111213@Configurationpublic class WebConfig extends WebMvcConfigurationSupport &#123; @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler("swagger-ui.html") .addResourceLocations("classpath:/META-INF/resources/"); registry.addResourceHandler("/webjars/**") .addResourceLocations("classpath:/META-INF/resources/webjars/"); &#125;&#125; 编写API接口添加@ApiOperation注解来给API增加说明，添加@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明123456@GetMapping("/test/&#123;id&#125;")@ApiOperation(value = "测试", notes = "接口测试")@ApiImplicitParam(name = "id", value = "测试ID", required = true, dataType = "Integer")public RestResult test(@PathVariable Integer id) &#123; return RestResult.builder().result(true).data(id).build();&#125; API文档访问点击浏览器链接 http://localhost:8090/swagger-ui.html]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客（部署篇）]]></title>
    <url>%2F2018%2F10%2F21%2FHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E9%83%A8%E7%BD%B2%E7%AF%87%EF%BC%89%2F</url>
    <content type="text"><![CDATA[目前为止我们的博客是搭建起来了，但在实际使用中我们会发现有诸多不便。比如说，我们要发表一篇博文，必须手动hexo g 命令生成静态网页，然后 hexo d 命令将静态文件推送到GitHub远程仓库。第一是比计较麻烦；第二，如果我们换了一个新的环境就没法发博客了。So，我们就要祭出我们的法宝-Travis CI了。 什么是 Travis CI Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。 部署思路 在github博客项目下创建一个新的分支hexo，将hexo博客源码push到该分支，master分支给git pages部署静态博客文件使用。 使用Travis CI自动部署hexo分支，每次我们写完博客后提交到hexo分支，Travis CI检测到后会自动部署将静态文件推送到master分支和coding上的我们配置的项目中。 使用 Travis CI部署博客 要使用 Travis CI，必须要有一个Github账号，因为Travis CI只支持在Github上构建项目。 登陆Travis CI（使用Github账号登陆）,把github账号的项目加载进来，如果没有自动加载进来，可以手动点击右上角的 Sync account 按钮，待到同步完成后将要自动构建的项目开启。 travis ci设置：开启General下的两项选线 。 配合Access Token：获取github生成的Access Token和coding上生成的Access Token；配置到Travis CI下的Environment Variables下。 编写配置文件 .travis.yml 1234567891011121314151617181920212223242526272829303132language: node_jsnode_js:- 8.9.0cache: directories: - node_modulesbefore_install:- npm install hexo-cli -ginstall:- npm installscript:- hexo clean- hexo generateafter_script:- cd ./public- git init- git config user.name &quot;dilijun&quot; # 配置自己的用户名- git config user.email &quot;dlj4job@sina.com&quot; # 配置自己的邮箱- git add .- git commit -m &quot;TravisCI 自动部署&quot;# Github Pages CI_TOKEN 为上一步在 Travis CI的 Environment Variables 下配置的变量名称- git push --force --quiet &quot;https://$&#123;CI_TOKEN&#125;@$&#123;GH_REF&#125;&quot; master:master# Coding Pages &lt;username&gt;写自己coding上的用户名，CO_TOKEN同上- git push --force --quiet &quot;https://&lt;username&gt;:$&#123;CO_TOKEN&#125;@$&#123;CO_REF&#125;&quot; master:masterbranches: only: - hexoenv: global: # Github Pages and Coding Pages 配置自己的github和coding地址 - GH_REF: github.com/dilijun/dilijun.github.io.git - GH_REF: git.coding.net/dilijun/dilijun.coding.me.git 将修改推送到 hexo 分支，然后等Travis CI 构建并自动部署成功。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客（用法篇）]]></title>
    <url>%2F2018%2F10%2F20%2FHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E7%94%A8%E6%B3%95%E7%AF%87%EF%BC%89%2F</url>
    <content type="text"><![CDATA[本片主要介绍如何使用Hexo博客。 Hexo博客支持Markdown语法，所以我们要使用Hexo博客，基本的Markdown还是要会的，不会的朋友可以去 Markdown基本语法 这里学习一下。 新建博客文章在博客根目录下使用命令 hexo new &#39;文章名称&#39; 创建文章，会在source/_posts/目录下生成名称为文章名称.md的博客。我们也可以直接进入该目录下手动创建markdown文件。 为文章添加meta信息我们新创建的文章，头部只有 title、date 和 tags 属性，我们可以增加 category、tags 和 comments 等属性。 category：文章分类，hexo会自动生成该分类信息 tags：文章标签，可以添加多个标签，hexo会自动生成标签信息tags: [tag1, tag2...] comments：添加评论插件后，设置是否可以评论。 图片的插入文章中想要插入图片，有多中方式选择： 在source目录下创建images目录，用于存放图片，在文章中可以直接使用/images/avatar.gif的方式引入。 使用图床，推荐使用七牛云，可以免费上传图片，然后复制图片地址插入文章中即可。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客（优化篇）]]></title>
    <url>%2F2018%2F10%2F19%2FHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BC%98%E5%8C%96%E7%AF%87%EF%BC%89%2F</url>
    <content type="text"><![CDATA[上一篇博客介绍了如何搭建一个Hexo博客，但是你以为Hexo就只有这样吗？No！ Hexo基础配置1.打开根目录下_config.yml配置文件，修改以下配置：1234567title: Mr.D&apos;s Blog #博客标题subtitle: 红尘嚣 浮华一世转瞬空 #博客子标题description: #描述keywords: #关键字author: Mr.D #博客作者language: zh-CN #语言timezone: 主题配置Hexo官方主题这里是Hexo的官方主题，本博客使用的是NexT主题，其他主题可以去上面的地址查看选&gt;用。 1. 在博客根目录下执行以下命令安装主题：git clone https://github.com/theme-next/hexo-theme-next themes/next。2. 修改根目录下的 _config.yml 配置文件theme，设置主题为next。 3.在scheme settings下选择自己喜欢的一款主题风格 4.配置导航菜单Hexo默认配置只有首页和归档我们可以编辑theme/next下的_config.yml配置来添加其他导航菜单，将需要添加的菜单注释放开即可：123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 这个时候我们新添加的菜单是不可用的，我们必须在source目录下创建对应的page文件夹，比如要创建标签文件夹，执行以下命令：1hexo new page `tags` 会在source下生成tags文件夹，文件加下会生成index.md文件，编辑index.md文件，删除title行，添加type: &#39;tags&#39;，comments: false的作用是添加评论插件后阻塞用户在该标签页下发表评论：12345---type: &apos;tags&apos;date: 2018-10-18 22:24:29comments: false--- 5.添加RSS 安装插件：在根目录下执行命令 npm install hexo-generator-feed --save 在根配置文件_config.yml文件中配置： 123# Extensions## Plugins: https://hexo.io/plugins/plugins: hexo-generate-feed 在主题配置文件theme/next/_config.yml文件中，找到rss，添加如下配置： 1rss: /atom.xml 6.添加 Fork me on Github在主题配置文件theme/next/_config.yml文件中，搜索Follow me on GitHub，找到如何配置，打开最后一行的注释，并把 yourname 改为你自己的github用户名即可：12345# Follow me on GitHub banner in right-top corner.# Usage: `permalink || title`# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the title and aria-label name.github_banner: https://github.com/yourname || Follow me on GitHub 7.博客背景添加粒子效果 进入theme/next/目录下，执行 以下命令：git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 执行成功后，将主题配置文件_config.yml中的 canvas_nest 值设置为 ture：123# Canvas-nest# Dependencies: https://github.com/theme-next/theme-next-canvas-nestcanvas_nest: true 8.修改文章内链样式 nexT提供了允许用户自定义样式的功能，我们可以进入theme/next/source/css/_custom/custom.styl文件中，添加想要的样式即可：123456789//自定义文章内链样式.post-body p a color: #f0ad4e; border-bottom: 1px solid #f0ad4e; &amp;:hover color: #0593d3; border-bottom: 1px solid #0593d3; 9.给文章底部的标签添加图标 打开文件themes/next/layout/_macro/post.swig，把12345&lt;div class=&quot;post-tags&quot;&gt; &#123;% for tag in post.tags %&#125; &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125;&lt;/div&gt; 中的 # 替换为 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 即可：12345678&lt;div class=&quot;post-tags&quot;&gt; &#123;% for tag in post.tags %&#125; &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt; &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125; &lt;/a&gt; &#123;% endfor %&#125;&lt;/div&gt; 10.设置头像动画效果 把头像图片添加到 theme/next/source/images 下，命名为 avatar.jpg 打开主题配置文件 theme/next/_config.yml，修改以下配置：123456789101112# Sidebar Avataravatar: # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/avatar.jpg #头像地址 # If true, the avatar would be dispalyed in circle. rounded: true #开启圆形头像 # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar. opacity: 1 # If true, the avatar would be rotated with the cursor. rotated: true #鼠标一上去时头像自动旋转 11.给文章添加阴影效果 打开文件theme/next/source/css/_custom/custom.styl，添加如下配置：1234567//主页文章添加阴影效果 .post margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); 12.开启文章访问量设置 进入主题配置文件 theme/next/_config.yml，修改 busuanzi_count 的 enable 属性为 true ：12345678910# Show Views/Visitors of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 13.开启文章中代码复制功能 进入主题配置文件 theme/next/_config.yml，修改 codeblock 下的 copy_button 的 enable 属性为 true ：123456789codeblock: # Manual define the border radius in codeblock # Leave it empty for the default 1 border_radius: # Add copy button on codeblock copy_button: enable: true # Show text copy result show_result: false 14.开启网页顶部的进度加载条 进入 theme/next/ 目录下，执行以下命令： 1git clone https://github.com/theme-next/theme-next-pace source/lib/pace 进入主题配置文件 theme/next/_config.yml，修改 pace 属性的值为 true ，并选择一款自己喜欢的加载样式 ： 123456789101112131415161718pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal 15.添加评论功能 本博客使用的是来必力，没有账号的可先去注册一个。 安装并配置好后，拷贝 data-uid的值。 在主题配置 theme/next/_config.yml 下找到 livere_uid，打开注释并配置上一步拷贝出来的 data-uid即可。123# Support for LiveRe comments system.# You can get your uid from https://livere.com/insight/myCode (General web site)livere_uid: your uid 16.隐藏底部Hexo强力驱动、主题等信息 在主题配置 theme/next/_config.yml 下找到 powered，把所有属性的值都改为 false 。 12345powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: false 在主题配置 theme/next/_config.yml 下找到 theme，把所有属性的值都改为 false 。 12345theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false 17.添加站内搜索 在根目录下执行以下命令安装 hexo-generator-searchdb： 1npm install hexo-generator-searchdb --save 上一步命令执行成功后，打开主题配置文件 theme/next/_config.yml，找到 local search 配置，设置属性 enable 为 true 即可： 1234567891011# Local search# Dependencies: https://github.com/theme-next/hexo-generator-searchdblocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 # unescape html strings to the readable one unescape: false 18.开启社交图标 打开主题配置文件 theme/next/_config.yml，找到 Social Links 配置，配置响应的社交链接：123456789101112# Social Links.social: GitHub: https://github.com/dilijun || github #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 19.文章底部配置版权信息 打开主题配置文件 theme/next/_config.yml，找到 Declare license on posts，配置 post_copyright 下的 enable 属性为 true：1234# Declare license on postspost_copyright: enable: true license: &lt;a href=&quot;https://creativecommons.org/licenses/by-nc-sa/4.0/&quot; rel=&quot;external nofollow&quot; target=&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;/a&gt; 20.开启文章阅读进度条 在 theme/next/ 目录下执行以下命令： 1git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress 执行成功后，进入主题配置中，找到 Reading progress bar，设置 enable 属性为 true 即可。 123456# Reading progress bar# Dependencies: https://github.com/theme-next/theme-next-reading-progressreading_progress: enable: true color: &quot;#37c6c0&quot; height: 2px 21.开启fancybox图片插件 在 theme/next/ 目录下执行以下命令： 1git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 命令执行成功后，打开主题配置，找到 Fancybox配置，设置为 true。 12# Fancybox. There is support for old version 2 and new version 3.fancybox: true]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建博客（基础篇）]]></title>
    <url>%2F2018%2F10%2F15%2FHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Hexo 是一个基于Node.js的快速、简洁且高效的博客框架。使用Markdown来编写文章，利用靓丽的主题可快速、轻松生成静态网页。 环境准备在安装Hexo之前，我们必须保证已安装一下应用程序： Node.js Git1. 安装Node.js（如已安装，可忽略该步骤）下载地址：Node.js安装成功后使用以下命令测试是否安装成功：node -v2. 安装Git（如已安装，可忽略该步骤）下载地址：Git安装成功后使用以下命令测试是否安装成功：git --version 搭建博客1. 安装hexo，命令：npm install -g hexo-cli 2. 初始化博客，命令：123hexo init &lt;blog_name&gt; --&lt;blog_name&gt;为你自己博客项目的名称，或者可以 mkdir &lt;blog_name&gt;，进入该目录下执行 hexo initcd &lt;blog_name&gt;npm install 3. 博客初始化后，可以使用以下命令启动博客：123hexo clean --清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo g(hexo generate) --生成静态页面 hexo s(hexo server) --开启本地服务 4. 此时打开浏览器，访问 http://localhost:4000 即可看到自带默认主题的博客。 5. Hexo命令知多少1234567hexo help --可查看hexo命令hexo generate --生成博客静态页面，也可用缩写命令 hexo ghexo clean --清除生成的静态页面hexo server --开启本地服务，也可用缩写命令 hexo s、hexo server --debug 是开启debug模式hexo deploy --部署博客，也可用缩写命令 hexo dhexo new &apos;postName&apos; --新建文章，默认会在 source/_posts/ 下生成&lt;postName&gt;.md的Markdown文件hexo new page &apos;pageName&apos; --新建页面，默认会在 source目录下，生成&lt;pageName&gt;文件夹，并在该文件夹下生成 index.md 文件 博客上github1. 确保有github账号，没有的可自己去github申请。2. 创建代码库，命名规则为yourname.github.io，‘yourname’为你自己github的用户名。 3. 生成ssh keysssh-keygen -t rsa -C &quot;your_email@example.com&quot;，一路回车即可，创建成功后，会在用户目录下的 .ssh 目录下生成 id_rsa和id_rsa.pub两个文件，我们把id_rsa.pub中的内容拷贝到github上即可，title可以随便填写。配置好后，可以使用ssh -T git@github.com命令来测试是否配置成功。 4. 修改Hexo配置 安装hexo-deployer-git插件，命令为：npm install --save hexo-deployer-git 打开根目录下的_config.yml配置文件，修改配置最后部分为1234deploy: type: git repo: git@github.com:(username)/(repoName).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master 5. 测试并部署123hexo clean --清空静态页面hexo g --生成新的静态页面hexo d --将public目录下的内容不素到github上 按以上目录操作完成后，可打开浏览器访问 http://username.github.io来访问博客(username.github.io为你的仓库名称) 6. 绑定域名 如果想通过域名访问的就继续，前提是要有自己的域名，要是通过上面的仓库名可以访问就满足的可以跳过这一步 去自己的域名下添加解析记录类型为 CNAME 主机记录为 @ 线路选择默认，TTL 选择 600，记录值为 github 的仓库名 username.github.io 配置 hexo创建 CNAME 配置文件 touch ~/hexo/source/CNAME，去 CNAME 文件 下添加刚才解析的域名 例如： zhangsan.com。然后重新部署一下 hexo g -d。此时即可用自己的域名来访问博客了。 博客上coding1. 确保有coding账号，没有的可去coding申请。2. 创建代码库，命名规则为username.coding.me，username为你自己的coding的用户名。3. 拷贝上面已生成的ssh keys的公钥到coding上 4. 修改hexo配置在根目录配置文件_config.yml中：1234deploy: type: git repo: git@github.com:(username)/(repoName).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master 改为如下配置：123456deploy: type: git repo: github: git@github.com:(username)/(repoName).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 coding: git@git.coding.net:(username)/(repoName).coding.me.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master 5. 再次部署并访问http://username.coding.me 。6. 绑定域名 去自己的域名下添加解析记录类型为 CNAME 主机记录为 @ 线路选择默认，TTL 选择 600，记录值为 coding的仓库名 username.coding.me。 在coding代码库的左侧代码菜单下点击Pages 服务，点击一键开启Coding Pages，进入Pages服务页面偶点击右侧的设置图标`，在自定义域名下，绑定刚才解析的域名。 重新部署hexo。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
